// Generated by CoffeeScript 1.6.3
(function() {
  var SituationClock,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  SituationClock = (function() {
    function SituationClock(clock) {
      this.updateTimeEpoch = __bind(this.updateTimeEpoch, this);
      this.updateTime = __bind(this.updateTime, this);
      this.clock = $(clock);
      this.timezone = this.clock.data("timezone");
      this.time = this.clock.find(".time");
      if (this.timezone === "EPOCH") {
        setInterval(this.updateTimeEpoch, 1000);
      } else {
        setInterval(this.updateTime, 1000);
      }
    }

    SituationClock.prototype.updateTime = function() {
      var h, m, time;
      if (this.timezone) {
        time = new timezoneJS.Date(new Date, this.timezone);
      } else {
        time = new Date;
      }
      h = this.leadingZero(time.getHours());
      m = this.leadingZero(time.getMinutes());
      return this.setTime("" + h + ":" + m);
    };

    SituationClock.prototype.updateTimeEpoch = function() {
      return this.setTime(Math.round(new Date().valueOf() / 1000));
    };

    SituationClock.prototype.leadingZero = function(num) {
      if (num < 10) {
        return "0" + num;
      } else {
        return num;
      }
    };

    SituationClock.prototype.setTime = function(time) {
      return this.time.html(time.toString());
    };

    SituationClock.resize = function() {
      var clocksHeight, fontSize, windowHeight, _results;
      windowHeight = window.innerHeight;
      clocksHeight = $(".clocks").height();
      fontSize = parseInt($("body").css("font-size").replace("px", ''));
      while (SituationClock.tooBig() && fontSize > 1) {
        windowHeight = window.innerHeight;
        clocksHeight = $(".clocks").height();
        fontSize = parseInt($("body").css("font-size").replace("px", ''));
        $("body").css("font-size", "" + (fontSize - 1) + "px");
      }
      _results = [];
      while (SituationClock.tooSmall()) {
        windowHeight = window.innerHeight;
        clocksHeight = $(".clocks").height();
        fontSize = parseInt($("body").css("font-size").replace("px", ''));
        _results.push($("body").css("font-size", "" + (fontSize + 1) + "px"));
      }
      return _results;
    };

    SituationClock.tooBig = function() {
      var clocksHeight, tooBig, windowHeight;
      windowHeight = window.innerHeight;
      clocksHeight = $(".clocks").height();
      if (clocksHeight + 100 > windowHeight) {
        return true;
      }
      tooBig = false;
      $(".clock").each(function(i, clock) {
        if ($(clock)[0].scrollWidth + 100 > window.innerWidth) {
          return tooBig = true;
        }
      });
      return tooBig;
    };

    SituationClock.tooSmall = function() {
      var clocksHeight, windowHeight;
      if (this.tooBig()) {
        return false;
      }
      windowHeight = window.innerHeight;
      clocksHeight = $(".clocks").height();
      return clocksHeight + 150 < windowHeight;
    };

    return SituationClock;

  }).call(this);

  $(function() {
    var clock, match;
    timezoneJS.timezone.zoneFileBasePath = './tz';
    timezoneJS.timezone.init({
      "async": false
    });
    if (match = location.search.match(/\?location=(.*)$/)) {
      clock = $("<div class=\"clock\"></div>");
      clock.append("<div class=\"time\"></div>");
      clock.append("<div class=\"location\">" + match[1] + "</div>");
      $('.clocks').append(clock);
    }
    $(".clock").each(function(i, clock) {
      return new SituationClock(clock);
    });
    $(window).resize(SituationClock.resize);
    return setTimeout(function() {
      $(".clock").show();
      return SituationClock.resize();
    }, 1000);
  });

}).call(this);
